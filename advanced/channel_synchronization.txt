package main

import (
	"fmt"
	"strconv"
	"time"
)

func main() {
	main1()
	main2()
	main3()
	main4()
}

func main1() {
	done := make(chan struct{})
	go func() {
		fmt.Println("Working...")
		time.Sleep(time.Duration(2) * time.Second)
		done <- struct{}{}
	}()

	<-done
	fmt.Println("Finished.")
}

func main2() {
	ch := make(chan int)

	go func() {
		ch <- 9 // blocking until the value is received
		time.Sleep(time.Duration(2) * time.Second)
		fmt.Println("Sent value")
	}()

	value := <-ch // blocking until the value is sent
	time.Sleep(time.Duration(3) * time.Second)
	fmt.Println(value)
}

func main3() {
	numGoroutines := 3
	done := make(chan int, 3)

	for i := range numGoroutines {
		go func(id int) {
			fmt.Printf("Goroutine %d working...\n", id)
			time.Sleep(time.Second)
			done <- id
		}(i)
	}

	for range numGoroutines {
		<-done // wait for each goroutine to finish
	}

	fmt.Println("All goroutines are finished")
}

func main4() {
	data := make(chan string)

	go func() {
		for i := range 5 {
			data <- "hello " + strconv.Itoa(i)
			time.Sleep(time.Duration(100) * time.Microsecond)
		}
		close(data)
	}()

	for v := range data {
		fmt.Println("Received value:", v, ":", time.Now())
	}
}
